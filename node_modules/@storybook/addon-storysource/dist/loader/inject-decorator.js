"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultOptions = _interopRequireDefault(require("./default-options"));

var _generateHelpers = require("./generate-helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function extendOptions(source, comments, filepath, options) {
  return _objectSpread({}, _defaultOptions.default, options, {
    source,
    comments,
    filepath
  });
}

function inject(source, decorator, filepath, options = {}) {
  const {
    injectDecorator = true
  } = options;
  const {
    changed,
    source: newSource,
    comments
  } = injectDecorator === true ? (0, _generateHelpers.generateSourceWithDecorators)(source, decorator, options.parser) : (0, _generateHelpers.generateSourceWithoutDecorators)(source, options.parser);

  if (!changed) {
    return {
      source: newSource,
      addsMap: {},
      changed
    };
  }

  const storySource = (0, _generateHelpers.generateStorySource)(extendOptions(source, comments, filepath, options));
  const addsMap = (0, _generateHelpers.generateAddsMap)(storySource, options.parser);
  return {
    source: newSource,
    storySource,
    addsMap,
    changed
  };
}

var _default = inject;
exports.default = _default;