"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSourceWithDecorators = generateSourceWithDecorators;
exports.generateSourceWithoutDecorators = generateSourceWithoutDecorators;
exports.generateAddsMap = generateAddsMap;
exports.generateStorySource = generateStorySource;

var _prettier = _interopRequireDefault(require("prettier"));

var _parseHelpers = require("./parse-helpers");

var _traverseHelpers = require("./traverse-helpers");

var _parsers = _interopRequireDefault(require("./parsers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isUglyComment(comment, uglyCommentsRegex) {
  return uglyCommentsRegex.some(regex => regex.test(comment));
}

function generateSourceWithoutUglyComments(source, {
  comments,
  uglyCommentsRegex
}) {
  let lastIndex = 0;
  const parts = [source];
  comments.filter(comment => isUglyComment(comment.value.trim(), uglyCommentsRegex)).map(_parseHelpers.patchNode).forEach(comment => {
    parts.pop();
    const start = source.slice(lastIndex, comment.start);
    const end = source.slice(comment.end);
    parts.push(start, end);
    lastIndex = comment.end;
  });
  return parts.join('');
}

function prettifyCode(source, {
  prettierConfig,
  parser,
  filepath
}) {
  let config = prettierConfig;

  if (!config.parser) {
    if (parser) {
      config = _objectSpread({}, prettierConfig, {
        parser: parser === 'javascript' ? 'babylon' : parser
      });
    } else if (filepath) {
      config = _objectSpread({}, prettierConfig, {
        filepath
      });
    } else {
      config = _objectSpread({}, prettierConfig, {
        parser: 'babylon'
      });
    }
  }

  return _prettier.default.format(source, config);
}

function generateSourceWithDecorators(source, decorator, parserType) {
  const parser = (0, _parsers.default)(parserType);
  const ast = parser.parse(source);
  const {
    comments = []
  } = ast;
  const parts = (0, _traverseHelpers.splitSTORYOF)(ast, source);
  const newSource = parts.join(decorator);
  return {
    changed: parts.length > 1,
    source: newSource,
    comments
  };
}

function generateSourceWithoutDecorators(source, parserType) {
  const parser = (0, _parsers.default)(parserType);
  const ast = parser.parse(source);
  const {
    comments = []
  } = ast;
  return {
    changed: true,
    source,
    comments
  };
}

function generateAddsMap(source, parserType) {
  const parser = (0, _parsers.default)(parserType);
  const ast = parser.parse(source);
  return (0, _traverseHelpers.findAddsMap)(ast);
}

function generateStorySource(_ref) {
  let {
    source
  } = _ref,
      options = _objectWithoutProperties(_ref, ["source"]);

  let storySource = source;
  storySource = generateSourceWithoutUglyComments(storySource, options);
  storySource = prettifyCode(storySource, options);
  return storySource;
}