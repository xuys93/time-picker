"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Viewport = exports.default = void 0;

require("core-js/modules/es6.array.index-of");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.function.name");

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _coreEvents = _interopRequireDefault(require("@storybook/core-events"));

var _utilDeprecate = _interopRequireDefault(require("util-deprecate"));

var _shared = require("../shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function noop() {}

var handler = noop;

var callHandler = function callHandler() {
  return handler.apply(void 0, arguments);
};

var subscription = function subscription() {
  var channel = _addons.default.getChannel();

  channel.on(_shared.VIEWPORT_CHANGED_EVENT_ID, callHandler);
  return function () {
    return channel.removeListener(_shared.VIEWPORT_CHANGED_EVENT_ID, callHandler);
  };
};

var applyViewportOptions = function applyViewportOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var channel = _addons.default.getChannel();

  handler = options.onViewportChange || noop;

  if (options.onViewportChange) {
    channel.emit(_coreEvents.default.REGISTER_SUBSCRIPTION, subscription);
  }

  channel.emit(_shared.SET_STORY_DEFAULT_VIEWPORT_EVENT_ID, options.name || _shared.DEFAULT_VIEWPORT);
};

var withViewport = (0, _addons.makeDecorator)({
  name: 'withViewport',
  parameterName: 'viewport',
  allowDeprecatedUsage: true,
  wrapper: function wrapper(getStory, context, _ref) {
    var options = _ref.options,
        parameters = _ref.parameters;
    var storyOptions = parameters || options;
    var viewportOptions = typeof storyOptions === 'string' ? {
      name: storyOptions
    } : storyOptions;

    if (viewportOptions) {
      applyViewportOptions(viewportOptions);
    }

    return getStory(context);
  }
});
var _default = withViewport;
exports.default = _default;
var Viewport = (0, _utilDeprecate.default)(function (_ref2) {
  var children = _ref2.children,
      options = _objectWithoutProperties(_ref2, ["children"]);

  applyViewportOptions(options);
  return children;
}, "<Viewport> usage is deprecated, use .addParameters({ viewport }) instead");
exports.Viewport = Viewport;