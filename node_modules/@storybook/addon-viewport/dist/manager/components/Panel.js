"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.function.name");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _global = require("global");

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _components = require("@storybook/components");

var _viewportInfo = require("./viewportInfo");

var _shared = require("../../shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var storybookIframe = 'storybook-preview-iframe';
var Container =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "ejagn3f0"
})({
  padding: 15,
  width: '100%',
  boxSizing: 'border-box',
  height: '100%',
  overflow: 'auto'
});
Container.displayName = 'Container';

function getDefaultViewport(viewports, candidateViewport) {
  return candidateViewport in viewports ? candidateViewport : Object.keys(viewports)[0];
}

var getViewports = function getViewports(viewports) {
  return Object.keys(viewports).length > 0 ? viewports : _shared.INITIAL_VIEWPORTS;
};

var Panel =
/*#__PURE__*/
function (_Component) {
  _inherits(Panel, _Component);

  function Panel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Panel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Panel)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "iframe", undefined);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "previousViewport", _shared.DEFAULT_VIEWPORT);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      viewport: _shared.DEFAULT_VIEWPORT,
      defaultViewport: _shared.DEFAULT_VIEWPORT,
      viewports: (0, _viewportInfo.viewportsTransformer)(_shared.INITIAL_VIEWPORTS),
      isLandscape: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setStoryDefaultViewport", function (viewport) {
      var viewports = _this.state.viewports;
      var defaultViewport = getDefaultViewport(viewports, viewport);

      _this.setState({
        storyDefaultViewport: defaultViewport
      });

      _this.changeViewport(defaultViewport);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "configure", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Panel.defaultOptions;
      var viewports = getViewports(options.viewports || {});
      var defaultViewport = getDefaultViewport(viewports, options.defaultViewport);

      _this.setState({
        defaultViewport: defaultViewport,
        viewport: defaultViewport,
        viewports: (0, _viewportInfo.viewportsTransformer)(viewports)
      }, _this.updateIframe);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeViewport", function (viewport) {
      var previousViewport = _this.state.viewport;

      if (previousViewport !== viewport) {
        _this.setState({
          viewport: viewport,
          isLandscape: false
        }, function () {
          _this.updateIframe();

          _this.emitViewportChanged();
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "emitViewportChanged", function () {
      var channel = _this.props.channel;
      var _this$state = _this.state,
          viewport = _this$state.viewport,
          viewports = _this$state.viewports;

      if (!_this.shouldNotify()) {
        return;
      }

      _this.previousViewport = viewport;
      channel.emit(_shared.VIEWPORT_CHANGED_EVENT_ID, {
        viewport: viewports[viewport]
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "shouldNotify", function () {
      var viewport = _this.state.viewport;
      return _this.previousViewport !== viewport;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleLandscape", function () {
      var isLandscape = _this.state.isLandscape;

      _this.setState({
        isLandscape: !isLandscape
      }, _this.updateIframe);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateIframe", function () {
      var _this$state2 = _this.state,
          viewports = _this$state2.viewports,
          viewportKey = _this$state2.viewport,
          isLandscape = _this$state2.isLandscape;
      var viewport = viewports[viewportKey] || _viewportInfo.resetViewport;

      if (!_this.iframe) {
        throw new Error('Cannot find Storybook iframe');
      }

      Object.keys(viewport.styles).forEach(function (prop) {
        _this.iframe.style[prop] = viewport.styles[prop];
      });

      if (isLandscape) {
        _this.iframe.style.height = viewport.styles.width;
        _this.iframe.style.width = viewport.styles.height;
      }
    });

    return _this;
  }

  _createClass(Panel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          channel = _this$props.channel,
          api = _this$props.api;
      this.iframe = _global.document.getElementById(storybookIframe);
      channel.on(_shared.UPDATE_VIEWPORT_EVENT_ID, this.changeViewport);
      channel.on(_shared.CONFIGURE_VIEWPORT_EVENT_ID, this.configure);
      channel.on(_shared.SET_STORY_DEFAULT_VIEWPORT_EVENT_ID, this.setStoryDefaultViewport);
      this.unsubscribeFromOnStory = api.onStory(function () {
        var defaultViewport = _this2.state.defaultViewport;

        _this2.setStoryDefaultViewport(defaultViewport);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var channel = this.props.channel;

      if (this.unsubscribeFromOnStory) {
        this.unsubscribeFromOnStory();
      }

      channel.removeListener(_shared.UPDATE_VIEWPORT_EVENT_ID, this.changeViewport);
      channel.removeListener(_shared.CONFIGURE_VIEWPORT_EVENT_ID, this.configure);
      channel.removeListener(_shared.SET_STORY_DEFAULT_VIEWPORT_EVENT_ID, this.setStoryDefaultViewport);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$state3 = this.state,
          isLandscape = _this$state3.isLandscape,
          defaultViewport = _this$state3.defaultViewport,
          _this$state3$storyDef = _this$state3.storyDefaultViewport,
          storyDefaultViewport = _this$state3$storyDef === void 0 ? defaultViewport : _this$state3$storyDef,
          viewport = _this$state3.viewport,
          viewports = _this$state3.viewports;
      var active = this.props.active;
      var isResponsive = viewport === storyDefaultViewport;
      return active ? _react.default.createElement(Container, null, _react.default.createElement(_components.Field, {
        label: "Device"
      }, _react.default.createElement(_components.Select, {
        value: viewport,
        onChange: function onChange(e) {
          return _this3.changeViewport(e.target.value);
        },
        size: "flex"
      }, Object.entries(viewports).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            name = _ref2[1].name;

        return _react.default.createElement("option", {
          value: key,
          key: key
        }, key === defaultViewport ? "".concat(name, " (Default)") : name);
      }))), !isResponsive ? _react.default.createElement(_components.Field, {
        label: "Rotate"
      }, _react.default.createElement(_components.Button, {
        onClick: this.toggleLandscape,
        active: isLandscape,
        size: "flex"
      }, isLandscape ? 'rotate to portrait' : 'rotate to landscape')) : null, _react.default.createElement(_components.ActionBar, null, _react.default.createElement(_components.ActionButton, {
        onClick: function onClick() {
          return _this3.changeViewport(storyDefaultViewport);
        },
        disabled: isResponsive
      }, "RESET"))) : null;
    }
  }]);

  return Panel;
}(_react.Component);

exports.Panel = Panel;

_defineProperty(Panel, "defaultOptions", {
  viewports: _shared.INITIAL_VIEWPORTS,
  defaultViewport: _shared.DEFAULT_VIEWPORT
});

_defineProperty(Panel, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  api: _propTypes.default.shape({
    selectStory: _propTypes.default.func.isRequired
  }).isRequired,
  channel: _propTypes.default.shape({
    on: _propTypes.default.func,
    emit: _propTypes.default.func,
    removeListener: _propTypes.default.func
  }).isRequired
});